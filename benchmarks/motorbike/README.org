* Scalable motorbike benchmark

These are scripts to configure a motorbike example with minimal effort.

If you rerun this workload in the same directory, then Please clean the case before any of the below scripts.

#+begin_src bash
./Clean
#+end_src


First, decide the size and mesh.  This can be configured with the initial blockmesh size:

#+begin_src bash
./Mesh <X> <Y> <Z>
#+end_src

Here is an example of meshes that will be created with different value pairs:

|-------+-------+-------+----------|
|   X   |   Y   |   Z   |  MCells  |
|-------+-------+-------+----------|
|    20 |     8 |     8 |     0.35 |
|    60 |    24 |    24 |     5.38 |
|    80 |    32 |    32 |    11.2  |
|    90 |    36 |    36 |    15.5  |
|   100 |    40 |    40 |    20    |
|   108 |    46 |    46 |    28    |
|   130 |    52 |    52 |    42    |
|   150 |    60 |    60 |    64    |
|   200 |    80 |    80 |   145    |
|-------+-------+-------+----------|

It is recommended to keep the same proportions among X, Y, and Z here.
Note: All meshing will be run with 16 MPI processes although you can change if necessary.
Note: Some applications will use mpirun. You need to setup required MPI settings before running Mesh, Setup, and Solve.

Now, you can set up the case for a given number of processes (calling setup again will wipe existing partitions):

#+begin_src bash
./Setup <NPROCS>
#+end_src

This will decompose and run potentialFoam.
<NPROCS> is an integer and this is the number of MPI ranks to be used for the main solver below.


Now, all you need to do is solve.  Either run simpleFoam or call:

#+begin_src bash
./Solve
#+end_src


