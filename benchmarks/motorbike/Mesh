#!/bin/bash

cd ${0%/*} || exit 1    # run from this directory

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

NX=$1
NY=$2
NZ=$3

NPROCS=16

echo "Setting up with $NPROCS procs.  Blockmesh size = $NX x $NY x $NZ"


# Check if OpenFOAM is from OpenCFD
[[ $FOAM_API =~ ^[0-9]{2}(06|12)$ ]] && OPENCFD=1 || OPENCFD=0
# Specific case when OpenFOAM Foundation version 9 and later
[[ $WM_PROJECT_VERSION -ge 9 ]] && scopechar="/" || scopechar="."

mkdir -p constant/polyMesh
mkdir -p constant/triSurface
[[ -h constant/geometry && ! -e constant/geometry ]] && rm -f constant/geometry
[[ ! -h constant/geometry ]] && ln -s triSurface constant/geometry

sed "s/NPROCS/$NPROCS/g" system/decomposeParDict-mesh.in > system/decomposeParDict
sed "s/NX/$NX/g;s/NY/$NY/g;s/NZ/$NZ/g" system/blockMeshDict-mesh.in > system/blockMeshDict
[[ $OPENCFD = "1" ]] && sed -i "s/convertToMeters/scale/g" system/blockMeshDict

# copy motorbike surface from resources directory
if [[ -f $FOAM_TUTORIALS/resources/geometry/motorBike.obj.gz ]]; then
 echo "Copying $FOAM_TUTORIALS/resources/geometry/motorBike.obj.gz to constant/triSurface/"
 cp -f $FOAM_TUTORIALS/resources/geometry/motorBike.obj.gz constant/triSurface/
fi

# Copy files from tutorials directory in case of updated input deck for new OpenFOAM version
files=(
 "meshQualityDict"
 "cuttingPlane"
 "forceCoeffs"
 "streamLines"
 "streamlines"
 "solverInfo"
 "graphFunctionObject"
 "foamReport"
 "snappyHexMeshDict"
 "wallBoundedStreamLines"
 "ensightWrite"
 "topoSetDict"
 "controlDict"
 "surfaceFeaturesDict"
 "surfaceFeatureExtractDict"
)

for file in "${files[@]}"
do
 if [[ -f "$FOAM_TUTORIALS/incompressible/simpleFoam/motorBike/system/$file" ]]; then
  echo "Copying $FOAM_TUTORIALS/incompressible/simpleFoam/motorBike/system/$file to system/"
  cp -f "$FOAM_TUTORIALS/incompressible/simpleFoam/motorBike/system/$file" system/
 fi
done

# Check surfaceFexture extraction executable from different OpenFOAM version
if [[ -f $FOAM_TUTORIALS/incompressible/simpleFoam/motorBike/system/surfaceFeaturesDict ]]; then
    surface=$(which surfaceFeatures)
elif [[ -f $FOAM_TUTORIALS/incompressible/simpleFoam/motorBike/system/surfaceFeatureExtractDict ]]; then
    surface=$(which surfaceFeatureExtract)
else
	surface=$(which surfaceFeatureExtract)
fi

# This will prevent some diagnostic function calls during the run
sed -i "s@#include@// #include@g" system/controlDict

# This will limit global number of cell to 50000000(50M)
# If you need to create mesh larger than 50M, then increase this value
foamDictionary -entry castellatedMeshControls${scopechar}maxGlobalCells -set "50000000" system/snappyHexMeshDict
# This will make OpenFOAM start from "startTime" not "latestTime"
foamDictionary -entry "startFrom" -set "startTime" system/controlDict
# This will reduce number of iteration from 500 to 250
foamDictionary -entry "endTime" -set "250" system/controlDict
# This will prevent writing some files and removes I/O activity during the run
foamDictionary -entry "writeInterval" -set "500" system/controlDict


runApplication $(basename $surface)

runApplication blockMesh

runApplication decomposePar

runParallel snappyHexMesh -overwrite
#mpirun -n $NPROCS snappyHexMesh -overwrite -parallel

runApplication reconstructParMesh -constant
rm -rf processor*

# This is optional. This may improve performance and may cause more unstable result for some cases
runApplication renumberMesh -constant -overwrite

